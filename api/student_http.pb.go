// Code generated by protoc-gen-go-http. DO NOT EDIT!
// Versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// Modified at 2020-12-01 13:07:24

package api

import (
	json "encoding/json"
	protoapi "github.com/fasgo/protoapi"
	grpc "google.golang.org/grpc"
	io "io"
)

func StudentServiceRegistry(impl interface{}) (*grpc.ServiceDesc, []*protoapi.HttpDesc) {
	var svc = impl.(StudentServiceServer)
	var hds []*protoapi.HttpDesc
	var hd *protoapi.HttpDesc
	{
		hd = new(protoapi.HttpDesc)
		hd.Package = `api`
		hd.Service = `StudentService`
		hd.Method = `Add`
		hd.POSTPath = `/demo/students`
		hd.POSTFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(Student)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryUint64(ctx, `sno`, &req.Sno)
				protoapi.QueryString(ctx, `name`, &req.Name)
				protoapi.QueryUint32(ctx, `age`, &req.Age)
				protoapi.QueryBool(ctx, `male`, &req.Male)
				protoapi.QueryString(ctx, `desc`, &req.Desc)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.Add(ctx, req)
		}
		hds = append(hds, hd)
	}
	{
		hd = new(protoapi.HttpDesc)
		hd.Package = `api`
		hd.Service = `StudentService`
		hd.Method = `Del`
		hd.DELETEPath = `/demo/students/:sno`
		hd.DELETEFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(Student)
			protoapi.ParamUint64(ctx, `sno`, &req.Sno)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryUint64(ctx, `sno`, &req.Sno)
				protoapi.QueryString(ctx, `name`, &req.Name)
				protoapi.QueryUint32(ctx, `age`, &req.Age)
				protoapi.QueryBool(ctx, `male`, &req.Male)
				protoapi.QueryString(ctx, `desc`, &req.Desc)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.Del(ctx, req)
		}
		hds = append(hds, hd)
	}
	{
		hd = new(protoapi.HttpDesc)
		hd.Package = `api`
		hd.Service = `StudentService`
		hd.Method = `Upd`
		hd.PUTPath = `/demo/students/:sno`
		hd.PUTFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(Student)
			protoapi.ParamUint64(ctx, `sno`, &req.Sno)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryUint64(ctx, `sno`, &req.Sno)
				protoapi.QueryString(ctx, `name`, &req.Name)
				protoapi.QueryUint32(ctx, `age`, &req.Age)
				protoapi.QueryBool(ctx, `male`, &req.Male)
				protoapi.QueryString(ctx, `desc`, &req.Desc)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.Upd(ctx, req)
		}
		hds = append(hds, hd)
	}
	{
		hd = new(protoapi.HttpDesc)
		hd.Package = `api`
		hd.Service = `StudentService`
		hd.Method = `Get`
		hd.GETPath = `/demo/students/:sno`
		hd.GETFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(Student)
			protoapi.ParamUint64(ctx, `sno`, &req.Sno)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryUint64(ctx, `sno`, &req.Sno)
				protoapi.QueryString(ctx, `name`, &req.Name)
				protoapi.QueryUint32(ctx, `age`, &req.Age)
				protoapi.QueryBool(ctx, `male`, &req.Male)
				protoapi.QueryString(ctx, `desc`, &req.Desc)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.Get(ctx, req)
		}
		hd.WBSKPath = `/demo/student/ws`
		hd.WBSKFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(Student)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryUint64(ctx, `sno`, &req.Sno)
				protoapi.QueryString(ctx, `name`, &req.Name)
				protoapi.QueryUint32(ctx, `age`, &req.Age)
				protoapi.QueryBool(ctx, `male`, &req.Male)
				protoapi.QueryString(ctx, `desc`, &req.Desc)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.Get(ctx, req)
		}
		hds = append(hds, hd)
	}
	{
		hd = new(protoapi.HttpDesc)
		hd.Package = `api`
		hd.Service = `StudentService`
		hd.Method = `All`
		hd.GETPath = `/demo/students`
		hd.GETFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(AllReq)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryInt32(ctx, `from`, &req.From)
				protoapi.QueryInt32(ctx, `size`, &req.Size)
				protoapi.QueryString(ctx, `search`, &req.Search)
				protoapi.QueryString(ctx, `field`, &req.Field)
				protoapi.QueryBool(ctx, `desc`, &req.Desc)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.All(ctx, req)
		}
		hds = append(hds, hd)
	}
	return &_StudentService_serviceDesc, hds
}

/*--------------------------SERVICES IMPLEMENT BEGIN--------------------------

import (
	"context"
)
type StudentServiceService struct {
	*api.UnimplementedStudentServiceServer
}
var _ api.StudentServiceServer = (*StudentServiceService)(nil)
func (s *StudentServiceService) Add(ctx context.Context, req *api.Student) (rsp *api.Student, err error) {
	return
}
func (s *StudentServiceService) Del(ctx context.Context, req *api.Student) (rsp *api.Student, err error) {
	return
}
func (s *StudentServiceService) Upd(ctx context.Context, req *api.Student) (rsp *api.Student, err error) {
	return
}
func (s *StudentServiceService) Get(ctx context.Context, req *api.Student) (rsp *api.Student, err error) {
	return
}
func (s *StudentServiceService) All(ctx context.Context, req *api.AllReq) (rsp *api.AllRsp, err error) {
	return
}

----------------------------SERVICES IMPLEMENT END----------------------------*/
