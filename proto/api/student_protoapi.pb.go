// Code generated by protoc-gen-go-protoapi. DO NOT EDIT!
// Versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// Modified at 2021-03-04 11:07:45

package api

import (
	json "encoding/json"
	io "io"
	protoapi "github.com/fasgo/protoapi"
)

func TagServiceRegistry(impl interface{}) *protoapi.ServiceSetting {
	ret := new(protoapi.ServiceSetting)
	ret.Desc = &TagService_ServiceDesc
	ret.Impl = impl
	ret.Package = `api`
	ret.Service = `TagService`
	var svc = impl.(TagServiceServer)
	{
		hd := new(protoapi.MethodSetting)
		hd.Method = `All`
		hd.GetPath = `/demo/students`
		hd.GetFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(AllReq)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryInt32(ctx, `from`, &req.From)
				protoapi.QueryInt32(ctx, `size`, &req.Size)
				protoapi.QueryString(ctx, `search`, &req.Search)
				protoapi.QueryString(ctx, `field`, &req.Field)
				protoapi.QueryBool(ctx, `desc`, &req.Desc)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.All(ctx, req)
		}
		ret.Methods = append(ret.Methods, hd)
	}
	{
		hd := new(protoapi.MethodSetting)
		hd.Method = `Get`
		hd.GetPath = `/demo/students/:sno`
		hd.GetFunc = func(ctx *protoapi.Context, in io.Reader) (interface{}, error) {
			req := new(Student)
			protoapi.ParamString(ctx, `sno`, &req.Sno)
			if ctx.Request.URL.RawQuery != `` {
				protoapi.QueryString(ctx, `sno`, &req.Sno)
				protoapi.QueryString(ctx, `name`, &req.Name)
				protoapi.QueryUint32(ctx, `gender`, &req.Gender)
				protoapi.QueryInt32(ctx, `grade`, &req.Grade)
				protoapi.QueryFloat32s(ctx, `score`, &req.Score)
				protoapi.QueryJson(ctx, `clazz`, &req.Clazz)
			}
			err := json.NewDecoder(in).Decode(req)
			if err != nil && err != io.EOF {
				return nil, err
			}
			return svc.Get(ctx, req)
		}
		ret.Methods = append(ret.Methods, hd)
	}
	return ret
}

/*--------------------------SERVICES IMPLEMENT BEGIN--------------------------

import (
	"context"
)
type TagServiceService struct {
	*api.UnimplementedTagServiceServer
}
var _ api.TagServiceServer = (*TagServiceService)(nil)
func (s *TagServiceService) All(ctx context.Context, req *api.AllReq) (rsp *api.AllRsp, err error) {
	return
}
func (s *TagServiceService) Get(ctx context.Context, req *api.Student) (rsp *api.Student, err error) {
	return
}
----------------------------SERVICES IMPLEMENT END----------------------------*/
